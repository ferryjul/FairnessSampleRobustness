library(ggplot2)
point_size <- 1.5
alpha_point <- 1.0
# Parameters
metric      <- 4 # 1 : statistical parity, 2 : predictive parity, 3 : predictive equality, 4 : equal opportunity, 5 : equalized odds, 6 : conditional use accuracy equality
datasetNum <- 1  # 1: Adult, 2: COMPAS, 3: Marketing, 4: Default Credit
# Other parameters (should remain unchanged for main experiments)
masks1 <- 0
masks2 <- 10
masks3 <- 30
masks1_arg <- sprintf("%dmasks", masks1)
masks2_arg <- sprintf("%dmasks", masks2)
masks3_arg <- sprintf("%dmasks", masks3)
suffix <- "without_filtering"
heuristic <- "BFS-objective-aware"
datasets <- list("adult", "compas", "marketing", "default_credit")
dataset <- datasets[datasetNum]
pareto_train()
pareto_test()
datasetNum <- 3  # 1: Adult, 2: COMPAS, 3: Marketing, 4: Default Credit
# Other parameters (should remain unchanged for main experiments)
masks1 <- 0
masks2 <- 10
masks3 <- 30
masks1_arg <- sprintf("%dmasks", masks1)
masks2_arg <- sprintf("%dmasks", masks2)
masks3_arg <- sprintf("%dmasks", masks3)
suffix <- "without_filtering"
heuristic <- "BFS-objective-aware"
datasets <- list("adult", "compas", "marketing", "default_credit")
dataset <- datasets[datasetNum]
# PARETO TRAIN
pareto_train <- function(){
mode <- "train"
file1     <- sprintf('results_compiled/%s_DRO_compile_eps_metric%d_%s_pareto_%s_%s_%dmasks.csv', dataset, metric, heuristic, mode, suffix, masks1) # adult_
df_file1  <- read.csv(file1, header=T)
file2     <- sprintf('results_compiled/%s_DRO_compile_eps_metric%d_%s_pareto_%s_%s_%dmasks.csv', dataset, metric, heuristic, mode, suffix, masks2) # adult_
df_file2  <- read.csv(file2, header=T)
file3     <- sprintf('results_compiled/%s_DRO_compile_eps_metric%d_%s_pareto_%s_%s_%dmasks.csv', dataset, metric, heuristic, mode, suffix, masks3) # adult_
df_file3  <- read.csv(file3, header=T)
ggplot() +
geom_smooth(method="lm") +
# coord_cartesian(ylim=c(0.0,0.25), xlim=c(0.30,0.47)) + # compas
# coord_cartesian(ylim=c(0.0,0.025), xlim=c(0.18,0.22)) + # default credit
geom_line(data=df_file1, aes(x=1-acc_train, y=unf_train,color=masks1_arg), linetype = "dashed") +
geom_point(data=df_file1, aes(x=1-acc_train, y=unf_train,color=masks1_arg,shape=masks1_arg), size=point_size, alpha=alpha_point) +
geom_line(data=df_file2, aes(x=1-acc_train, y=unf_train,color=masks2_arg), linetype = "dashed") +
geom_point(data=df_file2, aes(x=1-acc_train, y=unf_train,color=masks2_arg,shape=masks2_arg), size=point_size, alpha=alpha_point) +
geom_line(data=df_file3, aes(x=1-acc_train, y=unf_train,color=masks3_arg), linetype = "dashed") +
geom_point(data=df_file3, aes(x=1-acc_train, y=unf_train,color=masks3_arg,shape=masks3_arg), size=point_size, alpha=alpha_point)
}
# PARETO TEST
pareto_test <- function(){
mode <- "test"
file1     <- sprintf('results_compiled/%s_DRO_compile_eps_metric%d_%s_pareto_%s_%s_%dmasks.csv', dataset, metric, heuristic, mode, suffix, masks1) # adult_
df_file1  <- read.csv(file1, header=T)
file2     <- sprintf('results_compiled/%s_DRO_compile_eps_metric%d_%s_pareto_%s_%s_%dmasks.csv', dataset, metric, heuristic, mode, suffix, masks2) # adult_
df_file2  <- read.csv(file2, header=T)
file3     <- sprintf('results_compiled/%s_DRO_compile_eps_metric%d_%s_pareto_%s_%s_%dmasks.csv', dataset, metric, heuristic, mode, suffix, masks3) # adult_
df_file3  <- read.csv(file3, header=T)
df_file1 <- head(df_file1,-1)
df_file2 <- head(df_file2,-1)
df_file3 <- head(df_file3,-1)
ggplot() +
geom_smooth(method="lm") +
#coord_cartesian(ylim=c(0.0,0.25), xlim=c(0.30,0.47)) + # compas
#coord_cartesian(ylim=c(0.0,0.025), xlim=c(0.18,0.22)) + # default credit
#coord_cartesian(ylim=c(0.0,0.005), xlim=c(0.105,0.120)) + # marketing
geom_line(data=df_file1, aes(x=1-acc_test, y=unf_test,color=masks1_arg), linetype = "dashed") +
geom_point(data=df_file1, aes(x=1-acc_test, y=unf_test,color=masks1_arg,shape=masks1_arg), size=point_size, alpha=alpha_point) +
geom_line(data=df_file2, aes(x=1-acc_test, y=unf_test,color=masks2_arg), linetype = "dashed") +
geom_point(data=df_file2, aes(x=1-acc_test, y=unf_test,color=masks2_arg,shape=masks2_arg), size=point_size, alpha=alpha_point) +
geom_line(data=df_file3, aes(x=1-acc_test, y=unf_test,color=masks3_arg), linetype = "dashed") +
geom_point(data=df_file3, aes(x=1-acc_test, y=unf_test,color=masks3_arg,shape=masks3_arg), size=point_size, alpha=alpha_point)
}
# UNFAIRNESS VIOLATION TRAIN
unf_violation_train <- function() {
file     <- sprintf('results_compiled/%s_DRO_compile_eps_metric%d_%s_unf_violation_%s.csv', dataset, metric, heuristic, suffix)
df_file  <- read.csv(file, header=T)
ggplot() +
# -- Fairness
geom_smooth(method="lm") +
#coord_cartesian(xlim=c(0.90,1.0), ylim=c(0,0.15)) + # compas
coord_cartesian(xlim=c(0.98,1.0), ylim=c(0,0.02)) + # default credit
geom_line(data=df_file, aes(x=eps, y=unf_train_0masks,color=masks1_arg), linetype = "dashed") +
geom_point(data=df_file, aes(x=eps, y=unf_train_0masks,color=masks1_arg,shape=masks1_arg), size=point_size, alpha=alpha_point) +
geom_line(data=df_file, aes(x=eps, y=unf_train_10masks,color=masks2_arg), linetype = "dashed") +
geom_point(data=df_file, aes(x=eps, y=unf_train_10masks,color=masks2_arg,shape=masks2_arg), size=point_size, alpha=alpha_point) +
geom_line(data=df_file, aes(x=1-eps, y=eps,color='ref_eps'), linetype = "dotted") +
geom_point(data=df_file, aes(x=1-eps, y=eps,color='ref_eps',shape='ref_eps'), size=point_size, alpha=alpha_point) +
geom_line(data=df_file, aes(x=eps, y=unf_train_30masks,color=masks3_arg), linetype = "dashed") +
geom_point(data=df_file, aes(x=eps, y=unf_train_30masks,color=masks3_arg,shape="ref"), size=point_size, alpha=alpha_point)
}
# UNFAIRNESS VIOLATION TEST
unf_violation_test <- function() {
file     <- sprintf('results_compiled/%s_DRO_compile_eps_metric%d_%s_unf_violation_%s.csv', dataset, metric, heuristic, suffix)
df_file  <- read.csv(file, header=T)
ggplot() +
# -- Fairness
geom_smooth(method="lm") +
#coord_cartesian(xlim=c(0.90,1.0), ylim=c(0,0.15)) + # compas
coord_cartesian(xlim=c(0.98,1.0), ylim=c(0,0.02)) + # default credit
geom_line(data=df_file, aes(x=eps, y=unf_test_0masks,color=masks1_arg), linetype = "dashed") +
geom_point(data=df_file, aes(x=eps, y=unf_test_0masks,color=masks1_arg,shape=masks1_arg), size=point_size, alpha=alpha_point) +
geom_line(data=df_file, aes(x=eps, y=unf_test_10masks,color=masks2_arg), linetype = "dashed") +
geom_point(data=df_file, aes(x=eps, y=unf_test_10masks,color=masks2_arg,shape=masks2_arg), size=point_size, alpha=alpha_point) +
geom_line(data=df_file, aes(x=1-eps, y=eps,color='ref_eps'), linetype = "dotted") +
geom_point(data=df_file, aes(x=1-eps, y=eps,color='ref_eps',shape='ref_eps'), size=point_size, alpha=alpha_point) +
geom_line(data=df_file, aes(x=eps, y=unf_test_30masks,color=masks3_arg), linetype = "dashed") +
geom_point(data=df_file, aes(x=eps, y=unf_test_30masks,color=masks3_arg,shape="ref"), size=point_size, alpha=alpha_point)
}
# UNF GENERALIZATION
unf_generalization_zoom <- function(xx,yy) {
file     <- sprintf('results_compiled/%s_DRO_compile_eps_metric%d_%s_unf_violation_%s.csv', dataset, metric, heuristic, suffix)
df_file  <- read.csv(file, header=T)
ggplot() +
# -- Fairness
geom_smooth(method="lm") +
coord_cartesian(xlim=c(0, xx), ylim=c(0,yy)) + # compas
# geom_line(data=df_file, aes(x=unf_train_0masks, y=unf_test_0masks,color=masks1_arg), linetype = "dashed") +
geom_point(data=df_file, aes(x=unf_train_0masks, y=unf_test_0masks,color=masks1_arg,shape=masks1_arg), size=point_size, alpha=alpha_point) +
#geom_line(data=df_file, aes(x=unf_train_10masks, y=unf_test_10masks,color=masks2_arg), linetype = "dashed") +
geom_point(data=df_file, aes(x=unf_train_10masks, y=unf_test_10masks,color=masks2_arg,shape=masks2_arg), size=point_size, alpha=alpha_point) +
#geom_line(data=df_file, aes(x=unf_train_30masks, y=unf_test_30masks,color=masks3_arg), linetype = "dashed") +
geom_point(data=df_file, aes(x=unf_train_30masks, y=unf_test_30masks,color=masks3_arg,shape="ref"), size=point_size, alpha=alpha_point) +
geom_line(data=df_file, aes(x=unf_train_30masks, y=unf_train_30masks,color="ref"), linetype = "dashed")
}
unf_generalization <- function() {
file     <- sprintf('results_compiled/%s_DRO_compile_eps_metric%d_%s_unf_violation_%s.csv', dataset, metric, heuristic, suffix)
df_file  <- read.csv(file, header=T)
ggplot() +
# -- Fairness
geom_smooth(method="lm") +
# geom_line(data=df_file, aes(x=unf_train_0masks, y=unf_test_0masks,color=masks1_arg), linetype = "dashed") +
geom_point(data=df_file, aes(x=unf_train_0masks, y=unf_test_0masks,color=masks1_arg,shape=masks1_arg), size=point_size, alpha=alpha_point) +
#geom_line(data=df_file, aes(x=unf_train_10masks, y=unf_test_10masks,color=masks2_arg), linetype = "dashed") +
geom_point(data=df_file, aes(x=unf_train_10masks, y=unf_test_10masks,color=masks2_arg,shape=masks2_arg), size=point_size, alpha=alpha_point) +
#geom_line(data=df_file, aes(x=unf_train_30masks, y=unf_test_30masks,color=masks3_arg), linetype = "dashed") +
geom_point(data=df_file, aes(x=unf_train_30masks, y=unf_test_30masks,color=masks3_arg,shape="ref"), size=point_size, alpha=alpha_point) +
geom_line(data=df_file, aes(x=unf_train_30masks, y=unf_train_30masks,color="ref"), linetype = "dashed")
}
unf_generalization()
unf_generalization <- function() {
file     <- sprintf('./results_compiled/%s_DRO_compile_eps_metric%d_%s_unf_violation_%s.csv', dataset, metric, heuristic, suffix)
df_file  <- read.csv(file, header=T)
ggplot() +
# -- Fairness
geom_smooth(method="lm") +
# geom_line(data=df_file, aes(x=unf_train_0masks, y=unf_test_0masks,color=masks1_arg), linetype = "dashed") +
geom_point(data=df_file, aes(x=unf_train_0masks, y=unf_test_0masks,color=masks1_arg,shape=masks1_arg), size=point_size, alpha=alpha_point) +
#geom_line(data=df_file, aes(x=unf_train_10masks, y=unf_test_10masks,color=masks2_arg), linetype = "dashed") +
geom_point(data=df_file, aes(x=unf_train_10masks, y=unf_test_10masks,color=masks2_arg,shape=masks2_arg), size=point_size, alpha=alpha_point) +
#geom_line(data=df_file, aes(x=unf_train_30masks, y=unf_test_30masks,color=masks3_arg), linetype = "dashed") +
geom_point(data=df_file, aes(x=unf_train_30masks, y=unf_test_30masks,color=masks3_arg,shape="ref"), size=point_size, alpha=alpha_point) +
geom_line(data=df_file, aes(x=unf_train_30masks, y=unf_train_30masks,color="ref"), linetype = "dashed")
}
unf_generalization()
